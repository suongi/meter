#lang sicp
(define (verify-b boolean) ((boolean #t) #f))
(define (verify-n numeral) ((numeral (lambda (level) (+ 1 level))) 0))

(define (succ n) (lambda (f) (lambda (x) (f ((n f) x)))))
(define zero (lambda (f) (lambda (x) x)))
(define one (lambda (f) (lambda (x) (f x))))
(define three (lambda (f) (lambda (x) (f (f (f x))))))
(define five (lambda (f) (lambda (x) (f (f (f (f (f x))))))))
(define true (lambda (x) (lambda (y) x)))
(define false (lambda (x) (lambda (y) y)))
(define NOT (lambda (p) ((p false) true)))
(define (AND p q) ((p q) false))
(define (OR p q) ((p true) q))
(define (XOR p q) ((p (NOT q)) q))
(define (ITE c x y) ((c x) y))
(define iszero (lambda (n) ((n (lambda (x) false)) true)))
(define (plus p q) (lambda (f) (lambda (x) ((p f) ((q f) x)))))
(define pa (lambda (left) (lambda (right) (lambda (choice) ((choice left) right)))))
(define (pair left right) ((pa left) right))
(define carry (lambda (p) (pair (succ (p true)) (p true))))
(define (pred n) (((n carry) (pair zero zero)) false))
(define (sub n m) ((m pred) n))
(define (mult p q) (lambda (f) (p (q f))))
(define (pow b p) (p b))
(define cont-mult (lambda (p) (pair (succ (p true)) (mult (p true) (p false)))))
(define (fact n) (((n cont-mult) (pair one one)) false))
(define (cont-sub n m)
  (lambda (p) (ITE (iszero (sub (plus m (p false)) n))
                   (pair (succ (p true)) (plus m (p false)))
                   (pair (p true) (p false)))))
(define (div n m) (((n (cont-sub n m)) (pair zero zero)) true))                   
